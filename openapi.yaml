openapi: 3.0.0
info:
  version: 1.0.0
  title: AfterMeal API 문서
  description: 에프터밀 API 엔드포인트와 객체 정보, 파라미터, 요청 및 응답 예제를 확인하세요.

servers:
  - description: AfterMeal 개발 API 서버
    url: https://dev-api.aftermeal.online
  - description: AfterMeal 운영 API 서버
    url: https://api.aftermeal.online

tags:
  - name: Users
    description: 사용자 관련 엔드포인트
  - name: Activities
    description: 활동 관련 엔드포인트
  - name: Activity Locations
    description: 활동 장소 관련 엔드포인트
  - name: Participations
    description: 참가 관련 엔드포인트
  - name: Authentication
    description: 인증 관련 엔드포인트

paths:
  /users:
    post:
      tags:
        - Users
      summary: 사용자 등록
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRegistrationRequestDto"
      responses:
        201:
          description: 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    example: null
                    nullable: true
        400:
          description: 잘못된 요청
        404:
          description: 찾을 수 없음
        409:
          description: 충돌

    get:
      tags:
        - Users
      summary: 사용자 목록 조회
      security:
        - bearerAuth: []
      responses:
        200:
          description: 성공적인 작업
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/UserListResponseDto"

  /users/{userId}:
    patch:
      tags:
        - Users
      summary: 사용자 수정
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdateRequestDto"
      responses:
        204:
          description: 사용자가 성공적으로 수정되었습니다.

    delete:
      tags:
        - Users
      summary: 사용자 삭제
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        204:
          description: 사용자가 성공적으로 삭제되었습니다.

  /activities:
    post:
      tags:
        - Activities
      summary: 활동 생성
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ActivityCreationRequestDto"
      responses:
        201:
          description: 활동이 성공적으로 생성되었습니다.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    example: null
                    nullable: true

    get:
      tags:
        - Activities
      summary: 활동 목록 조회
      responses:
        200:
          description: 성공적인 응답
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/ActivitySummaryResponseDto"

  /activities/{activityId}:
    get:
      tags:
        - Activities
      summary: 활동 상세 조회
      parameters:
        - name: activityId
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: 성공적인 응답
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: "#/components/schemas/ActivityDetailResponseDto"

    patch:
      tags:
        - Activities
      summary: 활동 수정
      security:
        - bearerAuth: []
      parameters:
        - name: activityId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ActivityUpdateRequestDto"
      responses:
        204:
          description: 활동이 성공적으로 수정되었습니다.

    delete:
      tags:
        - Activities
      summary: 활동 삭제
      security:
        - bearerAuth: []
      parameters:
        - name: activityId
          in: path
          required: true
          schema:
            type: integer
      responses:
        204:
          description: 활동이 성공적으로 삭제되었습니다.

  /activity-locations:
    post:
      tags:
        - Activity Locations
      summary: 활동 장소 생성
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ActivityLocationCreationRequestDto"
      responses:
        201:
          description: 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    nullable: true
                    example: null

    get:
      tags:
        - Activity Locations
      summary: 활동 장소 목록 조회
      security:
        - bearerAuth: []
      responses:
        200:
          description: 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/ActivityLocationListResponseDto"

  /activity-locations/{activityLocationId}:
    patch:
      tags:
        - Activity Locations
      summary: 활동 장소 수정
      security:
        - bearerAuth: []
      parameters:
        - name: activityLocationId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ActivityLocationUpdateRequestDto"
      responses:
        204:
          description: 활동 장소가 성공적으로 수정되었습니다.

    delete:
      tags:
        - Activity Locations
      summary: 활동 장소 삭제
      security:
        - bearerAuth: []
      parameters:
        - name: activityLocationId
          in: path
          required: true
          schema:
            type: integer
      responses:
        204:
          description: 활동 장소가 성공적으로 삭제되었습니다.

  /participations:
    post:
      tags:
        - Participations
      summary: 참가 신청
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ParticipationApplicationRequestDto"
      responses:
        201:
          description: 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    example: null
                    nullable: true
        400:
          description: 잘못된 요청
        404:
          description: 찾을 수 없음
        409:
          description: 충돌

  /participations/{participationId}:
    delete:
      tags:
        - Participations
      summary: 참가 삭제
      security:
        - bearerAuth: []
      parameters:
        - name: participationId
          in: path
          required: true
          schema:
            type: integer
      responses:
        204:
          description: 참가가 성공적으로 삭제되었습니다.
        400:
          description: 잘못된 요청
        404:
          description: 찾을 수 없음

  /auth/login:
    post:
      tags:
        - Authentication
      summary: 로그인
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequestDto"
      responses:
        200:
          description: 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: "#/components/schemas/LoginResponseDto"

  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: 토큰 갱신
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TokenRefreshRequestDto"
      responses:
        200:
          description: 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: "#/components/schemas/TokenRefreshResponseDto"
        400:
          description: 잘못된 요청

  /auth/email-verify:
    post:
      tags:
        - Authentication
      summary: 이메일 인증
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmailVerificationRequestDto"
      responses:
        200:
          description: 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    nullable: true
                    example: null

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    UserRegistrationRequestDto:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        type:
          type: string
          enum:
            - STUDENT
            - TEACHER
        generationNumber:
          type: integer
          minimum: 1
        password:
          type: string
      required:
        - name
        - email
        - type
        - password

    UserListResponseDto:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
        role:
          type: string
          enum: [USER, ADMIN]
        type:
          type: string
          enum: [STUDENT, TEACHER]
        status:
          type: string
          enum: [ACTIVATE, DEACTIVATE]
        generationNumber:
          type: integer
          minimum: 1
      required:
        - id
        - name
        - email
        - role
        - type
        - status
        - generationNumber

    UserUpdateRequestDto:
      type: object
      properties:
        name:
          type: string
        type:
          type: string
          enum: [STUDENT, TEACHER]
        status:
          type: string
          enum: [ACTIVATE, DEACTIVATE]
        generationNumber:
          type: integer
          minimum: 1
        role:
          type: string
          enum: [USER, ADMIN]

    ActivityCreationRequestDto:
      type: object
      properties:
        title:
          type: string
        maxParticipants:
          type: integer
          minimum: 1
        activityLocationId:
          type: integer
          minimum: 1
        type:
          type: string
          enum: [LUNCH, DINNER]
        scheduledDate:
          type: string
          format: date
      required:
        - title
        - maxParticipants
        - activityLocationId
        - type
        - scheduledDate

    ActivitySummaryResponseDto:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        location:
          type: string
        maxParticipants:
          type: integer
        currentParticipants:
          type: integer
        type:
          type: string
          enum: [LUNCH, DINNER]
        scheduledDate:
          type: string
          format: date
        applicationStartAt:
          type: string
          format: date-time
        applicationEndAt:
          type: string
          format: date-time
      required:
        - id
        - title
        - location
        - maxParticipants
        - currentParticipants
        - type
        - scheduledDate
        - applicationStartAt
        - applicationEndAt

    ActivityDetailResponseDto:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        location:
          type: string
        maxParticipants:
          type: integer
        type:
          type: string
          enum: [LUNCH, DINNER]
        scheduledDate:
          type: string
          format: date
        applicationStartAt:
          type: string
          format: date-time
        applicationEndAt:
          type: string
          format: date-time
        participations:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
              user:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  type:
                    type: string
                    enum: [STUDENT, TEACHER]
                  generationNumber:
                    type: integer
                required:
                  - id
                  - name
                  - type
            required:
              - id
              - user
      required:
        - id
        - title
        - location
        - maxParticipants
        - type
        - scheduledDate
        - applicationStartAt
        - applicationEndAt
        - participations

    ActivityUpdateRequestDto:
      type: object
      properties:
        title:
          type: string
        maxParticipants:
          type: integer
          minimum: 1
        activityLocationId:
          type: integer
          minimum: 1
        type:
          type: string
          enum: [LUNCH, DINNER]
        scheduledDate:
          type: string
          format: date

    ActivityLocationCreationRequestDto:
      type: object
      properties:
        name:
          type: string
      required:
        - name

    ActivityLocationListResponseDto:
      type: object
      properties:
        id:
          type: integer
          minimum: 1
        name:
          type: string
      required:
        - id
        - name

    ActivityLocationUpdateRequestDto:
      type: object
      properties:
        name:
          type: string

    ParticipationApplicationRequestDto:
      type: object
      properties:
        activityId:
          type: integer
          minimum: 1
      required:
        - activityId

    LoginRequestDto:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      required:
        - email
        - password

    LoginResponseDto:
      type: object
      properties:
        accessToken:
          type: string
        tokenType:
          type: string
        expiredIn:
          type: integer
        refreshToken:
          type: string
        user:
          type: object
          properties:
            id:
              type: integer
            name:
              type: string
            role:
              type: string
              enum: [USER, ADMIN]
          required:
            - id
            - name
            - role
      required:
        - accessToken
        - tokenType
        - expiredIn
        - refreshToken
        - user

    TokenRefreshRequestDto:
      type: object
      properties:
        refreshToken:
          type: string
      required:
        - refreshToken

    TokenRefreshResponseDto:
      type: object
      properties:
        accessToken:
          type: string
        tokenType:
          type: string
        expiredIn:
          type: integer
        refreshToken:
          type: string
      required:
        - accessToken
        - tokenType
        - expiredIn
        - refreshToken

    EmailVerificationRequestDto:
      type: object
      properties:
        email:
          type: string
          example: test@example.com
        code:
          type: string
          example: "123456"
      required:
        - email
        - code