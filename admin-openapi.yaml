openapi: 3.0.0
info:
  version: 1.0.0
  title: AfterMeal API Admin Docs
  description: |
    에프터밀 관리자 API 엔드포인트(Endpoint)와 객체 정보, 파라미터, 요청 및 응답 예제를 살펴보세요.

servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/doong3373/aftermeal_admin/1.0.0
  - description: AfterMeal Development API Server
    url: https://dev-api.aftermeal.online
  - description: AfterMeal Production API Server
    url: https://api.aftermeal.online

tags:
  - name: Users
    description: 사용자 관련 엔드포인트
  - name: Activities
    description: 활동 관련 엔드포인트
  - name: Activity Locations
    description: 활동 장소 관련 엔드포인트
  - name: Participations
    description: 참가 관련 엔드포인트
  - name: Authentication
    description: 인증 관련 엔드포인트

paths:
  /admin/users:
    get:
      tags:
        - Users
      summary: 사용자 목록 조회
      security:
        - bearerAuth: []
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserListResponseDto"

  /admin/users/{userId}:
    patch:
      tags:
        - Users
      summary: 사용자 수정
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdateRequestDto"
      responses:
        200:
          description: User updated successfully

    delete:
      tags:
        - Users
      summary: 사용자 삭제
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        204:
          description: User deleted successfully

  /admin/activities:
    post:
      tags:
        - Activities
      summary: 활동 생성
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ActivityCreationRequestDto"
      responses:
        201:
          description: Activity created successfully

    get:
      tags:
        - Activities
      summary: 활동 목록 조회
      security:
        - bearerAuth: []
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ActivityListResponseDto"

  /admin/activities/{activityId}:
    get:
      tags:
        - Activities
      summary: 활동 상세 조회
      security:
        - bearerAuth: []
      parameters:
        - name: activityId
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActivityResponseDto"

    patch:
      tags:
        - Activities
      summary: 활동 수정
      security:
        - bearerAuth: []
      parameters:
        - name: activityId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ActivityUpdateDto"
      responses:
        200:
          description: Activity updated successfully

    delete:
      tags:
        - Activities
      summary: 활동 삭제
      security:
        - bearerAuth: []
      parameters:
        - name: activityId
          in: path
          required: true
          schema:
            type: integer
      responses:
        204:
          description: Activity deleted successfully

  /admin/activity-locations:
    post:
      tags:
        - Activity Locations
      summary: 활동 장소 생성
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ActivityLocationCreationRequestDto"
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActivityLocationCreationResponseDto"

    get:
      tags:
        - Activity Locations
      summary: 활동 장소 목록 조회
      security:
        - bearerAuth: []
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActivityLocationListResponseDto"
    
  /admin/activity-locations/{activityLocationId}:
    patch:
      tags:
        - Activity Locations
      summary: 활동 장소 수정
      security:
        - bearerAuth: []
      parameters:
        - name: activityLocationId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ActivityLocationUpdateRequestDto"
      responses:
        201:
          description: OK

    delete:
      tags:
        - Activity Locations
      summary: 활동 장소 삭제
      security:
        - bearerAuth: []
      parameters:
        - name: activityLocationId
          in: path
          required: true
          schema:
            type: integer
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActivityLocationListResponseDto"

  /admin/participations/{participationId}:
    delete:
      tags:
        - Participations
      summary: 참가 취소
      security:
        - bearerAuth: []
      parameters:
        - name: participationId
          in: path
          required: true
          schema:
            type: integer
      responses:
        204:
          description: Participation canceled successfully
        400:
          description: Bad Request
        404:
          description: Not Found

  /auth/login:
    post:
      tags:
        - Authentication
      summary: 로그인
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequestDto"
      responses:
        200:
          description: Login successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponseDto"

  /auth/refresh:
    post:
      operationId: AuthController_refresh
      summary: 토큰 갱신
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TokenRefreshRequestDto"
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenRefreshResponseDto"
        400:
          description: Bad Request
      tags:
        - Authentication

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    UserListResponseDto:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
        roles:
          type: array
          items:
            type: string
            enum: [USER, ADMIN]
        type:
          type: string
          enum: [STUDENT, TEACHER]
        status:
          type: string
          enum: [ACTIVATE, DEACTIVATE]
        generationNumber:
          type: integer
          minimum: 1
      required:
        - id
        - name
        - email
        - roles
        - type
        - status
        - generationNumber

    UserUpdateRequestDto:
      type: object
      properties:
        name:
          type: string
        type:
          type: string
          enum: [STUDENT, TEACHER]
        status:
          type: string
          enum: [ACTIVATE, DEACTIVATE]
        generationNumber:
          type: integer
          minimum: 1

    ActivityCreationRequestDto:
      type: object
      properties:
        title:
          type: string
        maxParticipants:
          type: integer
          minimum: 1
        location:
          type: string
        type:
          type: string
          enum: [LUNCH, DINNER]
        scheduledDate:
          type: string
          format: date
      required:
        - title
        - maxParticipants
        - location
        - type
        - scheduledDate

    ActivityListResponseDto:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        maxParticipants:
          type: integer
        currentParticipants:
          type: integer
        location:
          type: string
        status:
          type: string
          enum: [SCHEDULED, IN_PROGRESS, CANCELED, COMPLETED]
        type:
          type: string
          enum: [LUNCH, DINNER]
        scheduledDate:
          type: string
          format: date
        applicationStartDate:
          type: string
          format: date-time
        applicationEndDate:
          type: string
          format: date-time
      required:
        - id
        - title
        - maxParticipants
        - currentParticipants
        - location
        - status
        - type
        - scheduledDate
        - applicationStartDate
        - applicationEndDate

    ActivityResponseDto:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        maxParticipants:
          type: integer
        location:
          type: string
        status:
          type: string
          enum: [SCHEDULED, IN_PROGRESS, CANCELED, COMPLETED]
        type:
          type: string
          enum: [LUNCH, DINNER]
        scheduledDate:
          type: string
          format: date
        applicationStartDate:
          type: string
          format: date-time
        applicationEndDate:
          type: string
          format: date-time
        participants:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
              displayName:
                type: string
      required:
        - id
        - title
        - maxParticipants
        - status
        - type
        - scheduledDate
        - applicationStartDate
        - applicationEndDate
        - participants

    ActivityUpdateDto:
      type: object
      properties:
        title:
          type: string
        maxParticipants:
          type: integer
          minimum: 1
        location:
          type: string
        status:
          type: string
          enum: [SCHEDULED, IN_PROGRESS, CANCELED, COMPLETED]
        type:
          type: string
          enum: [LUNCH, DINNER]
        scheduledDate:
          type: string
          format: date
        applicationStartDate:
          type: string
          format: date-time
        applicationEndDate:
          type: string
          format: date-time

    ActivityLocationCreationRequestDto:
      type: object
      properties:
        name:
          type: string
      required:
        - name

    ActivityLocationCreationResponseDto:
      type: object
      properties:
        id:
          type: number
          minimum: 1
        name:
          type: string
      required:
        - id
        - name

    ActivityLocationListResponseDto:
      type: object
      properties:
        id:
          type: number
          minimum: 1
        name:
          type: string
      required:
        - id
        - name

    ActivityLocationUpdateRequestDto:
      type: object
      properties:
        name:
          type: string

    LoginRequestDto:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      required:
        - email
        - password

    LoginResponseDto:
      type: object
      properties:
        accessToken:
          type: string
        tokenType:
          type: string
        expiredIn:
          type: integer
        refreshToken:
          type: string
        user:
          type: object
          properties:
            id:
              type: string
            name:
              type: string
            roles:
              type: array
              items:
                type: string
                enum: [USER, ADMIN]
      required:
        - accessToken
        - tokenType
        - expiredIn
        - refreshToken
        - user

    TokenRefreshRequestDto:
      type: object
      properties:
        refreshToken:
          type: string
      required:
        - refreshToken

    TokenRefreshResponseDto:
      type: object
      properties:
        accessToken:
          type: string
        tokenType:
          type: string
        expiredIn:
          type: number
        refreshToken:
          type: string
      required:
        - accessToken
        - tokenType
        - expiredIn
        - refreshToken